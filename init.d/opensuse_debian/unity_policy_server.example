#! /bin/sh
### BEGIN INIT INFO
# Provides:          unity policy server
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Unity policy server daemon provide security auth for unity client
# Description:       Unity policy server daemon provide security auth for unity client
### END INIT INFO

IS_OPEN_SUSE=0

detect_distr(){
	CHECK_RES=`grep -ihs suse /etc/{issue,*release,*version} | wc -l`
	if [ $CHECK_RES -ne 0 ]; then
		IS_OPEN_SUSE=1
	fi
}

detect_distr

if [ $IS_OPEN_SUSE -eq 1 ]; then
	echo "Operating system Opensuse"
else
	echo "Operating system ubuntu"
fi

# PATH should only include /usr/* if it runs after the mountnfs.sh script
DESC="policy server instance"
NAME=unity_policy_server
DAEMON=/usr/bin/java
JAR=/home/development/unity_policy_server/target/$NAME-1.0-SNAPSHOT-jar-with-dependencies.jar
DAEMON_ARGS="-jar $JAR"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
LOG_DIR="/var/log/unity_policy_server"

if  ! [ -d $LOG_DIR ]; then
    mkdir -p $LOG_DIR
fi

test -x $DAEMON || { echo "$DAEMON not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

test -r $JAR || { echo "$JAR not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

PIDPATH=`dirname $PIDFILE`

test -w $PIDPATH || { echo "pid path $PIDPATH not writable"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

#FOO_CONFIG=/etc/sysconfig/FOO
#test -r $FOO_CONFIG || { echo "$FOO_CONFIG not existing";
#	if [ "$1" = "stop" ]; then exit 0;
#	else exit 6; fi; }

#. $FOO_CONFIG

if [ $IS_OPEN_SUSE -ne 1 ]; then
	# Load the VERBOSE setting and other rcS variables
	. /lib/init/vars.sh

	# Define LSB log_* functions.
	# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
	# and status_of_proc is working.
	. /lib/lsb/init-functions
else
	. /etc/rc.status

	# Reset status of this service
	rc_reset
fi

check_pid(){
  if [ -f $PIDFILE ]; then
    PID=`cat $PIDFILE`
    STATUS=`ps aux | grep " $PID "  | grep -v grep | wc -l`
  else
    STATUS=0
    PID=0
  fi
}
 
 
#
# Function that starts the daemon/service
#
do_start()
{
	echo -n "Starting $NAME $DESC"

	if [ $IS_OPEN_SUSE -ne 1 ]; then
		echo "\n"
		# Return
		#   0 if daemon has been started
		#   1 if daemon was already running
		#   2 if daemon could not be started
		start-stop-daemon --start --quiet --pidfile $PIDFILE --background --make-pidfile --exec $DAEMON --test  \
			> /dev/null \
			|| return 1

		start-stop-daemon --start --quiet --pidfile $PIDFILE --background --make-pidfile --exec $DAEMON -- \
			$DAEMON_ARGS \
			|| return 2
		# Add code here, if necessary, that waits for the process to be ready
		# to handle requests from services started subsequently which depend
		# on this one.  As a last resort, sleep for some time.
	else
		## Start daemon with startproc(8). If this fails
		## the return value is set appropriately by startproc.

		check_pid
  	if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
  		echo " $NAME alredy running"
  		rc_failed 
  	else
		 	$DAEMON $DAEMON_ARGS  > /dev/null  2>&1 &
			echo $! > $PIDFILE
		fi

		# Remember status and be verbose
		rc_status -v
	fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
	echo -n "Shutting down $NAME $DESC"

	if [ $IS_OPEN_SUSE -ne 1 ]; then
		echo "\n"
		# Return
		#   0 if daemon has been stopped
		#   1 if daemon was already stopped
		#   2 if daemon could not be stopped
		#   other if a failure occurred
		#start-stop-daemon --stop --quiet --retry=KILL/30/KILL/30 --oknodo --pidfile $PIDFILE --exec $DAEMON
		
		RETVAL=0

		check_pid
		if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
			kill `cat $PIDFILE`
			RETVAL="$?"
			rm -f $PIDFILE
			[ "$RETVAL" = 2 ] && return 2
		else
			RETVAL=1
			echo "$NAME already stoped"
		fi
		# Many daemons don't delete their pidfiles when they exit.
		return "$RETVAL"
	else
		/sbin/killproc -p $PIDFILE $DAEMON

		# Remember status and be verbose
		rc_status -v
	fi
}

#
# Function that sends a SIGHUP to the daemon/service
#
#do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	#start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --exec $NAME
	#return 0
#}

case "$1" in
  start)
	if [ $IS_OPEN_SUSE -ne 1 ]; then
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	fi
	do_start
	if [ $IS_OPEN_SUSE -ne 1 ]; then
		case "$?" in
				0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
				2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
	fi
	;;
  stop)
	if [ $IS_OPEN_SUSE -ne 1 ]; then
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	fi
	do_stop
	if [ $IS_OPEN_SUSE -ne 1 ]; then
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
	fi
	;;
  status)
			if [ $IS_OPEN_SUSE -ne 1 ]; then
       		check_pid
					if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
						echo "\n * $NAME is running"
						exit 0
					else
						echo "\n * $NAME is stopped"
						exit 2
					fi
      else
      	/sbin/checkproc -p $PIDFILE $DAEMON
      	rc_status -v
      fi
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	if [ $IS_OPEN_SUSE -ne 1 ]; then
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		case "$?" in
		  0|1)
			do_start
			case "$?" in
				0) log_end_msg 0 ;;
				1) log_end_msg 1 ;; # Old process is still running
				*) log_end_msg 1 ;; # Failed to start
			esac
			;;
		  *)
		  	# Failed to stop
				log_end_msg 1
			;;
		esac
	else
		do_stop
		do_start
	fi
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac

:
